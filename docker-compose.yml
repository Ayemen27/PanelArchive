# ==============================================================================
# Docker Compose Configuration for aaPanel - Production Environment
# ==============================================================================
# يوفر هذا الملف إعدادات الإنتاج الكاملة مع PostgreSQL و Redis
# This file provides complete production setup with PostgreSQL and Redis
#
# للتشغيل - To run:
#   docker-compose up -d
#
# للتوقف - To stop:
#   docker-compose down
#
# لعرض السجلات - To view logs:
#   docker-compose logs -f
# ==============================================================================

version: '3.8'

# ==============================================================================
# الخدمات - Services
# ==============================================================================
services:
  
  # ============================================================================
  # خدمة التطبيق الرئيسية - Main Application Service
  # ============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aapanel_app
    
    # المنفذ - Port mapping
    ports:
      - "5000:5000"
    
    # استخدام ملف البيئة - Use environment file
    env_file:
      - .env
    
    # الاعتماديات - Dependencies
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # الأحجام - Volumes
    volumes:
      # بيانات التطبيق الدائمة - Persistent application data
      - app_data:/app/data
      - app_logs:/app/logs
      # إعدادات الإنتاج - Production configs
      - ./config:/app/config:ro
    
    # الشبكة - Network
    networks:
      - aapanel_network
    
    # سياسة إعادة التشغيل - Restart policy
    restart: always
    
    # فحص الصحة - Health check
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || curl -f http://localhost:5000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  # ============================================================================
  # خدمة قاعدة البيانات - PostgreSQL Database Service
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: aapanel_postgres
    
    # استخدام ملف البيئة - Use environment file
    env_file:
      - .env
    
    # الأحجام - Volumes
    volumes:
      # بيانات PostgreSQL الدائمة - Persistent PostgreSQL data
      - postgres_data:/var/lib/postgresql/data
      # سكربتات التهيئة (اختياري) - Initialization scripts (optional)
      # - ./init-scripts:/docker-entrypoint-initdb.d:ro
    
    # المنفذ (للوصول الخارجي إذا لزم الأمر) - Port (for external access if needed)
    # ports:
    #   - "5432:5432"
    
    # الشبكة - Network
    networks:
      - aapanel_network
    
    # سياسة إعادة التشغيل - Restart policy
    restart: always
    
    # فحص الصحة - Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-aapanel_user} -d $${POSTGRES_DB:-production_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  
  # ============================================================================
  # خدمة Redis - Redis Caching Service
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: aapanel_redis
    
    # أوامر إضافية - Additional commands
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    
    # الأحجام - Volumes
    volumes:
      # بيانات Redis الدائمة - Persistent Redis data
      - redis_data:/data
    
    # المنفذ (للوصول الخارجي إذا لزم الأمر) - Port (for external access if needed)
    # ports:
    #   - "6379:6379"
    
    # الشبكة - Network
    networks:
      - aapanel_network
    
    # سياسة إعادة التشغيل - Restart policy
    restart: always
    
    # فحص الصحة - Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
  
  # ============================================================================
  # خدمة Prometheus - Metrics Collection Service
  # ============================================================================
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: aapanel_prometheus
    
    # أوامر إضافية - Additional commands
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    
    # المنافذ - Ports (قم بإزالة هذا في الإنتاج واستخدم nginx reverse proxy)
    ports:
      - "9090:9090"
    
    # الأحجام - Volumes
    volumes:
      # ملف التكوين - Configuration file
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      # Alert rules - قواعد التنبيه
      - ./prometheus-rules.yml:/etc/prometheus/rules/prometheus-rules.yml:ro
      # بيانات Prometheus الدائمة - Persistent Prometheus data
      - prometheus_data:/prometheus
    
    # الاعتماديات - Dependencies
    depends_on:
      - app
      - alertmanager
    
    # الشبكة - Network
    networks:
      - aapanel_network
    
    # سياسة إعادة التشغيل - Restart policy
    restart: always
    
    # فحص الصحة - Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  
  # ============================================================================
  # خدمة Grafana - Visualization & Dashboards Service
  # ============================================================================
  grafana:
    image: grafana/grafana:10.2.2
    container_name: aapanel_grafana
    
    # متغيرات البيئة - Environment variables
    environment:
      # Admin credentials (⚠️ يجب تغييرها في الإنتاج! لا تستخدم admin/admin)
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      # Server settings
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
      # Database (SQLite default)
      - GF_DATABASE_TYPE=sqlite3
      # Auth settings
      - GF_AUTH_ANONYMOUS_ENABLED=false
      # Logging
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=info
    
    # المنافذ - Ports (قم بإزالة هذا في الإنتاج واستخدم nginx reverse proxy)
    ports:
      - "3000:3000"
    
    # الأحجام - Volumes
    volumes:
      # بيانات Grafana الدائمة - Persistent Grafana data
      - grafana_data:/var/lib/grafana
      # Dashboards التلقائية - Auto-provisioned dashboards
      - ./grafana-dashboard-aapanel.json:/var/lib/grafana/dashboards/aapanel.json:ro
      # Datasources provisioning - Prometheus & Loki
      - ./grafana-datasource.yml:/etc/grafana/provisioning/datasources/prometheus.yml:ro
      - ./grafana-loki-datasource.yml:/etc/grafana/provisioning/datasources/loki.yml:ro
      # Dashboard provisioning
      - ./grafana-dashboard-provisioning.yml:/etc/grafana/provisioning/dashboards/dashboard.yml:ro
    
    # الاعتماديات - Dependencies
    depends_on:
      prometheus:
        condition: service_healthy
    
    # الشبكة - Network
    networks:
      - aapanel_network
    
    # سياسة إعادة التشغيل - Restart policy
    restart: always
    
    # فحص الصحة - Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  # ============================================================================
  # خدمة Alertmanager - Alert Management Service
  # ============================================================================
  alertmanager:
    image: prom/alertmanager:latest
    container_name: aapanel_alertmanager
    
    # أوامر إضافية - Additional commands
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--config.expand-env=true'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    
    # المنافذ - Ports (قم بإزالة هذا في الإنتاج واستخدم nginx reverse proxy)
    ports:
      - "9093:9093"
    
    # الأحجام - Volumes
    volumes:
      # ملف التكوين - Configuration file
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      # بيانات Alertmanager الدائمة - Persistent Alertmanager data
      - alertmanager_data:/alertmanager
    
    # استخدام ملف البيئة - Use environment file
    env_file:
      - .env
    
    # الشبكة - Network
    networks:
      - aapanel_network
    
    # سياسة إعادة التشغيل - Restart policy
    restart: always
    
    # فحص الصحة - Health check
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
  
  # ============================================================================
  # خدمة Loki - Centralized Logging Service
  # ============================================================================
  loki:
    image: grafana/loki:2.9.0
    container_name: aapanel_loki
    
    # Loki is internal-only for security. Access via Grafana.
    # No external port binding - accessible only within Docker network
    
    # الأحجام - Volumes
    volumes:
      # ملف التكوين - Configuration file
      - ./loki-config.yml:/etc/loki/local-config.yaml:ro
      # بيانات Loki الدائمة - Persistent Loki data
      - loki_data:/tmp/loki
    
    # أوامر إضافية - Additional commands
    command: -config.file=/etc/loki/local-config.yaml
    
    # الشبكة - Network
    networks:
      - aapanel_network
    
    # سياسة إعادة التشغيل - Restart policy
    restart: unless-stopped
    
    # فحص الصحة - Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  
  # ============================================================================
  # خدمة Promtail - Log Collection Service
  # ============================================================================
  promtail:
    image: grafana/promtail:2.9.0
    container_name: aapanel_promtail
    
    # الأحجام - Volumes
    volumes:
      # ملف التكوين - Configuration file
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
      # Application logs - سجلات التطبيق
      - app_logs:/app/logs:ro
      # Docker container logs - سجلات حاويات Docker
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      # Docker socket for container metadata enrichment (read-only)
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # System logs - سجلات النظام (اختياري)
      - /var/log:/var/log:ro
      # Positions file - ملف المواضع
      - promtail_positions:/tmp
    
    # أوامر إضافية - Additional commands
    command: -config.file=/etc/promtail/config.yml
    
    # الاعتماديات - Dependencies
    depends_on:
      loki:
        condition: service_healthy
    
    # الشبكة - Network
    networks:
      - aapanel_network
    
    # سياسة إعادة التشغيل - Restart policy
    restart: unless-stopped

# ==============================================================================
# الأحجام الدائمة - Persistent Volumes
# ==============================================================================
volumes:
  # بيانات PostgreSQL - PostgreSQL data
  postgres_data:
    driver: local
    name: aapanel_postgres_data
  
  # بيانات Redis - Redis data
  redis_data:
    driver: local
    name: aapanel_redis_data
  
  # بيانات التطبيق - Application data
  app_data:
    driver: local
    name: aapanel_app_data
  
  # سجلات التطبيق - Application logs
  app_logs:
    driver: local
    name: aapanel_app_logs
  
  # بيانات Prometheus - Prometheus data
  prometheus_data:
    driver: local
    name: aapanel_prometheus_data
  
  # بيانات Grafana - Grafana data
  grafana_data:
    driver: local
    name: aapanel_grafana_data
  
  # بيانات Alertmanager - Alertmanager data
  alertmanager_data:
    driver: local
    name: aapanel_alertmanager_data
  
  # بيانات Loki - Loki data
  loki_data:
    driver: local
    name: aapanel_loki_data
  
  # Promtail positions - Promtail positions file
  promtail_positions:
    driver: local
    name: aapanel_promtail_positions

# ==============================================================================
# الشبكات - Networks
# ==============================================================================
networks:
  aapanel_network:
    driver: bridge
    name: aapanel_network

# ==============================================================================
# ملاحظات مهمة - Important Notes
# ==============================================================================
#
# 1. الأمان - Security:
#    - غيّر SECRET_KEY في الإنتاج الحقيقي
#    - غيّر كلمات المرور الافتراضية (POSTGRES_PASSWORD)
#    - استخدم ملف .env لتخزين المتغيرات الحساسة
#
# 2. البيانات الدائمة - Persistent Data:
#    - جميع البيانات محفوظة في volumes منفصلة
#    - لحذف البيانات: docker-compose down -v
#    - لعمل نسخة احتياطية: docker run --rm -v aapanel_postgres_data:/data -v $(pwd):/backup alpine tar czf /backup/backup.tar.gz /data
#
# 3. الأداء - Performance:
#    - Redis مُعَد بـ 256MB ذاكرة كحد أقصى
#    - PostgreSQL مُحَسَّن لـ UTF-8
#    - التطبيق يستخدم Gunicorn مع GeventWebSocketWorker
#
# 4. المراقبة - Monitoring:
#    - فحص الصحة يعمل تلقائياً كل 30 ثانية
#    - لعرض حالة الخدمات: docker-compose ps
#    - لعرض السجلات: docker-compose logs -f [service_name]
#    - Prometheus: http://localhost:9090
#    - Grafana: http://localhost:3000 (admin/admin)
#
# 5. التحديثات - Updates:
#    - لتحديث التطبيق: docker-compose up -d --build app
#    - لتحديث جميع الخدمات: docker-compose up -d --build
#
# 6. Prometheus & Grafana:
#    - Prometheus يجمع المقاييس من /health/metrics كل 10 ثوانٍ
#    - Grafana dashboards محمّلة تلقائياً من grafana-dashboard-aapanel.json
#    - لتغيير admin password: قم بتعيين GRAFANA_ADMIN_PASSWORD في .env
#    - البيانات محفوظة في prometheus_data و grafana_data volumes
#
# ==============================================================================
