# ==================== GitHub Actions: Auto Deploy to VPS ====================
# نشر تلقائي آمن إلى VPS مع health checks و rollback

name: Deploy to VPS

on:
  workflow_run:
    workflows: ["Build & Push Docker Image"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOY_PATH: /opt/aapanel

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    # فقط إذا كان build ناجح (للـ workflow_run trigger)
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://${{ secrets.VPS_DOMAIN }}
    
    steps:
      # ==================== الخطوة 1: Checkout الكود ====================
      - name: Checkout repository
        uses: actions/checkout@v4

      # ==================== الخطوة 2: تجهيز SSH Key ====================
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      # ==================== الخطوة 2.5: التحقق من المتغيرات الحرجة ====================
      - name: Validate critical environment variables
        run: |
          echo "🔍 Validating critical environment variables..."
          VALIDATION_FAILED=0
          
          # التحقق من متغيرات GitHub Secrets
          if [ -z "${{ secrets.VPS_HOST }}" ]; then
            echo "❌ VPS_HOST is not set in GitHub secrets"
            VALIDATION_FAILED=1
          else
            echo "✅ VPS_HOST is set"
          fi
          
          if [ -z "${{ secrets.VPS_USER }}" ]; then
            echo "❌ VPS_USER is not set in GitHub secrets"
            VALIDATION_FAILED=1
          else
            echo "✅ VPS_USER is set"
          fi
          
          if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
            echo "❌ VPS_SSH_KEY is not set in GitHub secrets"
            VALIDATION_FAILED=1
          else
            echo "✅ VPS_SSH_KEY is set"
          fi
          
          if [ -z "${{ secrets.VPS_DOMAIN }}" ]; then
            echo "❌ VPS_DOMAIN is not set in GitHub secrets"
            VALIDATION_FAILED=1
          else
            echo "✅ VPS_DOMAIN is set"
          fi
          
          # التحقق من SECRET_KEY على VPS
          echo ""
          echo "🔍 Validating SECRET_KEY on VPS..."
          ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
          
          cd ${{ env.DEPLOY_PATH }}
          
          # التحقق من وجود .env (إلزامي للإنتاج)
          if [ ! -f .env ]; then
            if [ "${{ github.event.inputs.environment || 'production' }}" = "production" ]; then
              echo "❌ .env file not found on VPS for production deployment"
              echo "   Production deployments require pre-configured .env with SECRET_KEY"
              exit 1
            else
              echo "⚠️  .env file not found - will be created during staging deployment"
              exit 0
            fi
          fi
          
          # استخراج SECRET_KEY من .env
          SECRET_KEY=$(grep '^SECRET_KEY=' .env 2>/dev/null | cut -d'=' -f2- | tr -d '"' | tr -d "'" | xargs)
          
          if [ -z "$SECRET_KEY" ]; then
            echo "❌ SECRET_KEY is not set in .env"
            exit 1
          fi
          
          # التحقق من طول SECRET_KEY
          SECRET_KEY_LENGTH=${#SECRET_KEY}
          if [ $SECRET_KEY_LENGTH -lt 32 ]; then
            echo "❌ SECRET_KEY is too short: $SECRET_KEY_LENGTH chars (minimum: 32)"
            exit 1
          fi
          
          # رفض placeholder values
          if echo "$SECRET_KEY" | grep -qE '(your-secret|change.*me|example|test.*secret|placeholder|xxx+|aaa+)'; then
            echo "❌ SECRET_KEY appears to be a placeholder value"
            exit 1
          fi
          
          echo "✅ SECRET_KEY is valid ($SECRET_KEY_LENGTH chars)"
          
          # التحقق من DATABASE للإنتاج فقط
          if [ "${{ github.event.inputs.environment || 'production' }}" = "production" ]; then
            # استخراج DATABASE_URI و DATABASE_URL من .env
            DATABASE_URI=$(grep '^DATABASE_URI=' .env 2>/dev/null | cut -d'=' -f2- | tr -d '"' | tr -d "'" | xargs)
            DATABASE_URL=$(grep '^DATABASE_URL=' .env 2>/dev/null | cut -d'=' -f2- | tr -d '"' | tr -d "'" | xargs)
            
            if [ -z "$DATABASE_URI" ] && [ -z "$DATABASE_URL" ]; then
              echo "⚠️  DATABASE_URI/DATABASE_URL not set (SQLite will be used)"
              echo "   ℹ️  Production typically requires PostgreSQL or MySQL"
            else
              echo "✅ Database connection is configured"
            fi
          fi
          
          exit 0
          ENDSSH
          
          # فحص نتيجة SSH
          SSH_RESULT=$?
          if [ $SSH_RESULT -ne 0 ]; then
            echo "❌ VPS environment validation failed"
            VALIDATION_FAILED=1
          fi
          
          # الخروج بفشل إذا فشل أي فحص
          if [ $VALIDATION_FAILED -eq 1 ]; then
            echo ""
            echo "❌ Environment validation failed! Deployment aborted."
            exit 1
          fi
          
          echo ""
          echo "✅ All critical environment variables validated successfully!"

      # ==================== الخطوة 3: حفظ التكوين الحالي ====================
      - name: Backup current configuration
        run: |
          ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
          cd ${{ env.DEPLOY_PATH }}
          
          # حفظ docker-compose.yml الحالي قبل الاستبدال
          if [ -f docker-compose.yml ]; then
            cp docker-compose.yml docker-compose.prev.yml
            echo "✅ Backed up current docker-compose.yml to docker-compose.prev.yml"
          else
            echo "ℹ️  No existing docker-compose.yml to backup (first deployment)"
          fi
          ENDSSH
      
      # ==================== الخطوة 4: نسخ ملفات النشر ====================
      - name: Copy deployment files to VPS
        run: |
          scp -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            docker-compose.prod.yml \
            .env.example \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ env.DEPLOY_PATH }}/
          
          # استبدال بالملف الجديد
          ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "cd ${{ env.DEPLOY_PATH }} && mv docker-compose.prod.yml docker-compose.yml && echo '✅ Deployed new docker-compose.yml'"

      # ==================== الخطوة 5: نسخ سكريبت النشر ====================
      - name: Copy deploy script
        run: |
          scp -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            deploy.sh \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ env.DEPLOY_PATH }}/
          
          ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "chmod +x ${{ env.DEPLOY_PATH }}/deploy.sh"

      # ==================== الخطوة 6: تنفيذ النشر ====================
      - name: Execute deployment
        id: deploy
        run: |
          ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
          
          # الانتقال لمجلد النشر
          cd ${{ env.DEPLOY_PATH }}
          
          # تصدير المتغيرات
          export REGISTRY=${{ env.REGISTRY }}
          export IMAGE_NAME=${{ env.IMAGE_NAME }}
          export IMAGE_TAG=latest
          
          # تشغيل سكريبت النشر
          ./deploy.sh
          
          ENDSSH

      # ==================== الخطوة 7: Health Check ====================
      - name: Health check
        run: |
          echo "Waiting for application to start..."
          sleep 15
          
          # فحص الصحة
          MAX_RETRIES=10
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f -s https://${{ secrets.VPS_DOMAIN }}/health > /dev/null 2>&1 || \
               curl -f -s https://${{ secrets.VPS_DOMAIN }}/ > /dev/null 2>&1; then
              echo "✅ Health check passed!"
              exit 0
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Health check attempt $RETRY_COUNT/$MAX_RETRIES failed, retrying..."
            sleep 5
          done
          
          echo "❌ Health check failed after $MAX_RETRIES attempts"
          exit 1

      # ==================== الخطوة 8: Rollback عند الفشل ====================
      - name: Rollback on failure
        if: failure()
        run: |
          echo "⚠️  Deployment failed, initiating rollback..."
          
          ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
          
          cd ${{ env.DEPLOY_PATH }}
          
          # التراجع للإصدار السابق
          if [ -f docker-compose.prev.yml ]; then
            echo "Rolling back to previous version..."
            cp docker-compose.prev.yml docker-compose.yml
            
            # إعادة تشغيل باستخدام التكوين السابق
            docker-compose up -d --force-recreate
            echo "✅ Rollback completed - restored previous configuration"
          else
            echo "⚠️  No previous version found for rollback"
            echo "Attempting to restart current version..."
            docker-compose restart
          fi
          
          ENDSSH

      # ==================== الخطوة 9: إشعار بالنجاح ====================
      - name: Deployment success notification
        if: success()
        run: |
          echo "### 🚀 Deployment Successful! ###"
          echo ""
          echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}"
          echo "**Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "**URL:** https://${{ secrets.VPS_DOMAIN }}"
          echo ""
          echo "✅ Application is now live!"

      # ==================== الخطوة 9: تنظيف ====================
      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
