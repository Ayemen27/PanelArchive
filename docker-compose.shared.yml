# ==============================================================================
# Docker Compose Configuration - Shared Services
# ==============================================================================
# Shared infrastructure for Blue-Green Deployment
# PostgreSQL and Redis are shared between Blue and Green environments
#
# Usage:
#   docker-compose -f docker-compose.shared.yml up -d
# ==============================================================================

version: '3.8'

# ==============================================================================
# Shared Services
# ==============================================================================
services:
  
  # ============================================================================
  # Shared PostgreSQL Database Service
  # ============================================================================
  postgres-shared:
    image: postgres:15-alpine
    container_name: aapanel_postgres_shared
    
    # Environment file
    env_file:
      - .env
    
    # Volumes
    volumes:
      # Persistent PostgreSQL data
      - postgres_data_shared:/var/lib/postgresql/data
    
    # Network
    networks:
      - aapanel_network
    
    # Restart policy
    restart: always
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-aapanel_user} -d $${POSTGRES_DB:-production_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  
  # ============================================================================
  # Shared Redis Caching Service
  # ============================================================================
  redis-shared:
    image: redis:7-alpine
    container_name: aapanel_redis_shared
    
    # Additional commands
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    
    # Volumes
    volumes:
      # Persistent Redis data
      - redis_data_shared:/data
    
    # Network
    networks:
      - aapanel_network
    
    # Restart policy
    restart: always
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
  
  # ============================================================================
  # Shared Prometheus - Metrics Collection Service
  # ============================================================================
  prometheus-shared:
    image: prom/prometheus:v2.48.0
    container_name: aapanel_prometheus_shared
    
    # Commands
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    
    # Ports (قم بإزالة هذا في الإنتاج واستخدم nginx reverse proxy)
    ports:
      - "9090:9090"
    
    # Volumes
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      # Alert rules - قواعد التنبيه
      - ./prometheus-rules.yml:/etc/prometheus/rules/prometheus-rules.yml:ro
      - prometheus_data_shared:/prometheus
    
    # Dependencies
    depends_on:
      - alertmanager-shared
    
    # Network (with alias for datasource compatibility)
    networks:
      aapanel_network:
        aliases:
          - prometheus  # Allow Grafana to connect via http://prometheus:9090
    
    # Restart policy
    restart: always
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  
  # ============================================================================
  # Shared Grafana - Visualization & Dashboards Service
  # ============================================================================
  grafana-shared:
    image: grafana/grafana:10.2.2
    container_name: aapanel_grafana_shared
    
    # Environment
    environment:
      # ⚠️ يجب تعيين هذه المتغيرات في .env! لا توجد قيم افتراضية
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
      - GF_DATABASE_TYPE=sqlite3
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=info
    
    # Ports (قم بإزالة هذا في الإنتاج واستخدم nginx reverse proxy)
    ports:
      - "3000:3000"
    
    # Volumes
    volumes:
      - grafana_data_shared:/var/lib/grafana
      - ./grafana-dashboard-aapanel.json:/var/lib/grafana/dashboards/aapanel.json:ro
      - ./grafana-datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
      - ./grafana-dashboard-provisioning.yml:/etc/grafana/provisioning/dashboards/dashboard.yml:ro
    
    # Dependencies
    depends_on:
      prometheus-shared:
        condition: service_healthy
    
    # Network
    networks:
      - aapanel_network
    
    # Restart policy
    restart: always
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  # ============================================================================
  # Shared Alertmanager - Alert Management Service
  # ============================================================================
  alertmanager-shared:
    image: prom/alertmanager:latest
    container_name: aapanel_alertmanager_shared
    
    # Commands
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--config.expand-env=true'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    
    # Ports (قم بإزالة هذا في الإنتاج واستخدم nginx reverse proxy)
    ports:
      - "9093:9093"
    
    # Volumes
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data_shared:/alertmanager
    
    # Environment file
    env_file:
      - .env
    
    # Network (with alias for datasource compatibility)
    networks:
      aapanel_network:
        aliases:
          - alertmanager  # Allow Prometheus to connect via alertmanager:9093
    
    # Restart policy
    restart: always
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

# ==============================================================================
# Persistent Volumes
# ==============================================================================
volumes:
  # Shared PostgreSQL data
  postgres_data_shared:
    driver: local
    name: aapanel_postgres_data_shared
  
  # Shared Redis data
  redis_data_shared:
    driver: local
    name: aapanel_redis_data_shared
  
  # Shared Prometheus data
  prometheus_data_shared:
    driver: local
    name: aapanel_prometheus_data_shared
  
  # Shared Grafana data
  grafana_data_shared:
    driver: local
    name: aapanel_grafana_data_shared
  
  # Shared Alertmanager data
  alertmanager_data_shared:
    driver: local
    name: aapanel_alertmanager_data_shared

# ==============================================================================
# Networks
# ==============================================================================
networks:
  aapanel_network:
    driver: bridge
    name: aapanel_network

# ==============================================================================
# Important Notes
# ==============================================================================
#
# 1. Start shared services first:
#    docker-compose -f docker-compose.shared.yml up -d
#
# 2. Then start blue or green:
#    docker-compose -f docker-compose.blue.yml up -d
#    docker-compose -f docker-compose.green.yml up -d
#
# 3. Shared services persist between deployments
#
# ==============================================================================
